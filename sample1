package com.ccb.sns.producer;

import software.amazon.awssdk.services.sns.SnsClient;
import software.amazon.awssdk.services.sns.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

/**
 * SNSProducer - Production-ready code for publishing messages to AWS SNS.
 */
public class SnsProducer {

    private static final Logger LOGGER = LoggerFactory.getLogger(SnsProducer.class);

    private final SnsClient snsClient;
    private final String topicArn;
    private final ObjectMapper objectMapper;

    public SnsProducer(SnsClient snsClient, String topicArn) {
        this.snsClient = snsClient;
        this.topicArn = topicArn;
        this.objectMapper = new ObjectMapper();
    }

    /**
     * Publishes an event to the SNS topic.
     * @param event Event object to be published.
     */
    public void publishEvent(Event event) {
        try {
            String messageBody = objectMapper.writeValueAsString(event);

            PublishRequest publishRequest = PublishRequest.builder()
                    .topicArn(topicArn)
                    .message(messageBody)
                    .messageAttributes(Map.of(
                            "EIN", MessageAttributeValue.builder()
                                    .dataType("String")
                                    .stringValue(event.getEIN())
                                    .build()
                    ))
                    .build();

            PublishResponse response = snsClient.publish(publishRequest);
            LOGGER.info("Message published successfully. MessageId: {}", response.messageId());
        } catch (Exception e) {
            LOGGER.error("Failed to publish message to SNS", e);
        }
    }

    public static void main(String[] args) {
        String topicArn = System.getenv("SNS_TOPIC_ARN");

        if (topicArn == null || topicArn.isEmpty()) {
            throw new IllegalArgumentException("Environment variable SNS_TOPIC_ARN is not set.");
        }

        try (SnsClient snsClient = SnsClient.create()) {
            SnsProducer producer = new SnsProducer(snsClient, topicArn);

            // Example event
            Event event = new Event();
            event.setEIN("123456789");
            event.setData("Sample payload data");

            producer.publishEvent(event);
        } catch (Exception e) {
            LOGGER.error("Failed to initialize SnsProducer", e);
        }
    }
}

// Event POJO
class Event {
    private String EIN;
    private String data;

    public String getEIN() {
        return EIN;
    }

    public void setEIN(String EIN) {
        this.EIN = EIN;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    @Override
    public String toString() {
        return "Event{" +
                "EIN='" + EIN + '\'' +
                ", data='" + data + '\'' +
                '}';
    }
}
